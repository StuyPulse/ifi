#!/usr/bin/env python

#Auto Makefile Generator
#Copyright under terms of GPL
#Based on Team 245's old Makefile....
#		Copyright (C) 2005  Team 245
#
#		This program is free software; you can redistribute it and/or modify
#		it under the terms of the GNU General Public License as published by
#		the Free Software Foundation; either version 2 of the License, or
#		(at your option) any later version.
#
#		This program is distributed in the hope that it will be useful,
#		but WITHOUT ANY WARRANTY; without even the implied warranty of
#		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#		GNU General Public License for more details.
#
#		You should have received a copy of the GNU General Public License
#		along with this program; if not, write to the Free Software Foundation,
#		Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.


import os;

PIC="18F8722";
LIBNAME="FRC2k6_library.lib";
WPILIB="WPILib2k6.lib";
CLEAN=True;
DEBUG=False;
VERSION="0.1.92 (0.2 beta 3) Modified by Goldeye (Joshua Hecht - Team 694)";

def printGPLBanner():
	print "Makefile Generator, version "+VERSION+", Copyright (C) 2005 Adam-Bots"
	print "This software comes with ABSOLUTELY NO WARRANTY"
	print "This is free software, and you are welcome to redistribute it under certain conditions; See the accompanying license for details"
	
def isCygwin():
	import os;
	return os.platform=='cygwin'

def isLinux():
	import os;
	return os.platform.beginswith('linux')

def useOldRC():
	import sys;
	if 'old' in sys.argv:
		global PIC,LIBNAME,WPILIB;
		print "Using old FRC with PIC8520 Processor\n"; 
		PIC="18F8520";
		LIBNAME=LIBNAME.replace("2k6","2k5");
		WPILIB=WPILIB.replace("2k6","2k5");

def useAlltimers():
	import sys;
	if 'alltimers' in sys.argv:
		global LIBNAME;
		print "Using alltimers library.\n"
		LIBNAME=LIBNAME.replace("library","alltimers");

def mccPath():
	#Find path to the MCC folder.
	if isCygwin():
		pass
def sprint(msg,level=0):
	# Prints a message of a given verbosity:
		#Level 0 : Print regardless of status
		#Level 1 : Print if DEBUG is set
	if level == 0:
		print msg
	elif level == 1:
		if DEBUG:
			print "DEBUG:",msg
	else:
		print msg
def mccCommand():
	return "mcc18"
def mccArgs():
	return "-D_FRC_BOARD -w3 pa=3"
def linkerCommand():
	return "mplink"
def mp2hexCommand():
	return "mp2hex"
def ifiLoaderCommand():
	return "picloader"
def ifiSerialDevice():
	return "/dev/ttyS0"
def ifiReadLogfile():
	return "./read.log"
def codePath():
	unixish_path="Z:"+os.getcwd()+"//"
	return unixish_path.replace("/","\\")
def libPath():
	return "/opt/mcc18/lib"
def includePath():
	return "/opt/mcc18/h"
def includePathWindows():
	return "Z:\\\\opt\\\\mcc18\\\\h"

printGPLBanner();
print
print
useOldRC();
useAlltimers();
if CLEAN:
	try:
		f = open("Makefile")
		f.close();
		os.system("make clean");
	except IOError:
		print("Creating a new Makefile");
print

sprint("Opening the Makefile",1)
print
outfile=open('Makefile','w')
outfile.write('#This is automatically generated by the configure.py script\n#Keep your dirty hands off');
outfile.write("\n")
outfile.write('#Run ./configure.py to generate a fresh one.')
outfile.write("\n")
outfile.write('MCC18='+mccCommand())
outfile.write("\n")
outfile.write('PIC='+PIC)
outfile.write("\n")
outfile.write('LIBNAME='+LIBNAME)
outfile.write("\n")
outfile.write('WPILIB='+WPILIB)
outfile.write("\n")
outfile.write("ARGS="+mccArgs())
outfile.write("\n")
outfile.write("LINKER="+linkerCommand())
outfile.write("\n")
outfile.write("MP2HEX="+mp2hexCommand())
outfile.write("\n")
outfile.write("IFILOAD="+ifiLoaderCommand())
outfile.write("\n")
outfile.write("SERIAL_DEV="+ifiSerialDevice())
outfile.write("\n")
outfile.write("READLOG="+ifiReadLogfile())
outfile.write("\n")
outfile.write("LIB_PATH="+libPath())
outfile.write("\n")
outfile.write("CODE_PATH="+codePath())
outfile.write("\n")
outfile.write("INCLUDE_PATH="+includePath())
outfile.write("\n")
outfile.write("INCLUDE_PATHW="+includePathWindows())
outfile.write("\n")
outfile.write("\n\n\n\n")


sprint("Enumerating Target Object Files...")
import os;
all_targets=""
pipe=os.popen("find . -maxdepth 1 -name \"*.c\" | gawk '{gsub(/\\.c/,\".o\");print}' | uniq",'rt') 
line=pipe.readline()
while line != "":
	all_targets+=line[2:-1]
	all_targets+=" "
	line=pipe.readline()

all_targets.rstrip()

outfile.write("ALL_TARGETS="+all_targets);
outfile.write("\n")
sprint("Enumerating Header Files...")

pipe=os.popen("find . -name \"*.h\"",'rt')
line=pipe.readline()
headers=""
while line != "":
        headers+=line[2:-1]
        headers+=" "
        line=pipe.readline()
headers.rstrip()


outfile.write("INCLUDE_FILES="+headers);
outfile.write("\n")
outfile.write("############ Targets: ")
outfile.write("\n")
outfile.write("default: FrcCode.hex")
outfile.write("\n")

sprint("Writing static targets...")
outfile.write("""
#Remove all the individual file backup (The files ending with ~)
#NOTE that this does NOT remove your tbz2 backups!
clean-backup-files:
	@echo -e "Removing all the ~ backup files your annoying editor makes..."
	@find . -name "*~" |xargs rm -f

#Removes all compiled files from the directory
clean: clean-backup-files clean-deps nohex
	@echo -e "Cleaning compiler intermediate files..."
	@rm -rf *.o *.err

#Remove deps folder
clean-deps:
	@echo -e "Cleaning dependency folder..."
	@rm -rf .deps
	@mkdir .deps
	@touch .deps/dummy

#Remove hexfiles
nohex:
	@echo -e "Cleaning linker output and hex files..."
	@rm -rf *.hex *.cod *.cof

#These all start the IFI Loader.
safeload: prettycode clean check load
load: FrcCode.hex
	$(IFILOAD) FrcCode.hex $(SERIAL_DEV)

read:
	@echo -e "Monitoring $(SERIAL_DEV) for data"
	@echo -e "Output will also be logged to $(READLOG)"
	@echo -e "---------"
	@picreader $(SERIAL_DEV) | tee $(READLOG) || /bin/true
	
	
prettycode:
	@echo -e "Using indent to autoformat your .c and .h files..."
	@indent *.c *.h
all: clean FrcCode.hex
%.o: %.c
	@echo -e "Compiling $@..."
	@echo -e "1.   Checking Dependencies for $@"
	@cpp -nostdinc -isystem $(INCLUDE_PATH) -D__$(PIC) -M -MP $< -MF .deps/$*.deps
	@echo -e "2.   Launching Compiler..."
	@echo -n "A thought to keep you occupied:  "
	@fortune -s || echo "GET FORTUNE"
	@$(MCC18) -p=$(PIC) -fo $@ $< /i\\""$(INCLUDE_PATHW)"\\" $(ARGS) 
	@echo -e "Done with $@."




FrcCode.hex :  $(ALL_TARGETS) $(INCLUDE_FILES)
	@echo -e "Linking..."
	$(LINKER) /l\\""$(LIB_PATH)"\\" \\""`echo $(PIC) | tr F f `.lkr"\\" $(ALL_TARGETS) \\""$(CODE_PATH)$(WPILIB)"\\" \\""$(CODE_PATH)$(LIBNAME)"\\"  \\/m\\""FrcCode.map"\\" /o\\""FrcCode.cof"\\"
	$(MP2HEX) FrcCode.cof
	@echo -e "Linked FrcCode.hex"



.deps/*: 
	@echo -e "Creating Dependency Makefiles..."
	@mkdir -p .deps
	@touch .deps/dummy
	@echo -e "Done!"

include .deps/*
""")
print
print

sprint("Makefile is generated, setting up working directory....")
os.system('rm -rf .deps')
os.system('mkdir .deps')
os.system('touch .deps/dummy')

print
print
print

sprint("Finished. To build, run 'make'")
