#include <string.h>
#include <stdio.h>
#include "controller.h"
#include "trajectory.h"
#include "traj_ram.h"

#define THIS_TRAJ T_RAM


extern trajectory traj_array[NUM_TRAJ];

static void start(robo_state *rs, bot_params *bp);
static int run(robo_state *rs, robo_target *rt);
static void stop(void);




void init_ram()
{
  traj_array[THIS_TRAJ].start = start;
  traj_array[THIS_TRAJ].run = run;
  traj_array[THIS_TRAJ].stop = stop;
}

/********************* FILL IN FUNCTIONS FOR YOUR ****************
 ********************* SPECIFIC TRAJECTORY   ********************/
static int time = 0;
static robo_state initial;

static int stopped = 1;
static int laststep=-1;
static int step=0;
static int traj=T_NULL;

void start(robo_state * rs, bot_params * bp){
  if(stopped){
    memcpy((void *)&initial,(void *)rs,sizeof(robo_state));

    time = 0;
    stopped = 0;

    laststep = -1;
    step = 0;
    traj = T_NULL;
  }
}

int run(robo_state *rs, robo_target *rt)
{
  // Redo this with a lookup table
  int distance_to_light = HEIGHT_DELTA / tan(TILT_ANGLE);
  bot_params bp;

  if(stopped)
    return TRAJ_DONE;

  if(step!=laststep)
    {
      switch(step)
	{
	case 0:
	  if(INRANGE(PAN_SERVO,-10,10))
	    {
	      traj=T_STRAIGHT;
	      bp.straight.velocity = 60; // 4 feet/second
	      bp.straight.heading = -1;
	      bp.straight.time = 0;
	      bp.straight.distance = distance_to_light;
	      break;
	    }
	  else
	    {
	      traj=T_TURN_RADIUS;
	      bp.turn_radius.radius = 60;
	      bp.turn_radius.heading = PAN_ANGLE;
	      bp.velocity = 60;
	      bp.time = PAN_ANGLE * bp.turn_radius.radius / distance_to_light;
	    }
	case 1:
	  traj=T_ARM;
	default:
	  return TRAJ_DONE;
	  break;
	}
        traj_array[traj].start(rs, &bp);
      
      laststep=step;
    }
    printf("traj# %d start %x run %x stop %x\r",traj,traj_array[traj].start,traj_array[traj].run,traj_array[traj].stop);
  if(traj_array[traj].run(rs, rt) == TRAJ_DONE)
    {
      traj_array[traj].stop();
      step++;
    }
  return TRAJ_RUNNING;
}


void stop()
{
  stopped = 1;
}
